DOCKER

Docker is written in Go and makes use of several kernel features to deliver the functionality we’ve seen.



docker run -i -t ubuntu /bin/bash
In order, Docker does the following:

Pulls the ubuntu image: Docker checks for the presence of the ubuntu image and, if it doesn’t exist locally on the host, then Docker downloads it from Docker Hub. If the image already exists, then Docker uses it for the new container.
Creates a new container: Once Docker has the image, it uses it to create a container.
Allocates a filesystem and mounts a read-write layer: The container is created in the file system and a read-write layer is added to the image.
Allocates a network / bridge interface: Creates a network interface that allows the Docker container to talk to the local host.
Sets up an IP address: Finds and attaches an available IP address from a pool.
Executes a process that you specify: Runs your application, and;
Captures and provides application output: Connects and logs standard input, outputs and errors for you to see how your application is running.

1)Docker images are the build component of Docker.
2)Docker registries are the distribution component of Docker.
3)Docker containers are the run component of Docker.


Namespaces
Docker takes advantage of a technology called namespaces to provide the isolated workspace we call the container. When you run a container, Docker creates a set of namespaces for that container.

This provides a layer of isolation: each aspect of a container runs in its own namespace and does not have access outside it.

Some of the namespaces that Docker uses on Linux are:

The pid namespace: Used for process isolation (PID: Process ID).
The net namespace: Used for managing network interfaces (NET: Networking).
The ipc namespace: Used for managing access to IPC resources (IPC: InterProcess Communication).
The mnt namespace: Used for managing mount-points (MNT: Mount).
The uts namespace: Used for isolating kernel and version identifiers. (UTS: Unix Timesharing System).


## Installtion of Docker

root@devOps:~# apt-get update

root@devOps:~# apt-get install -y docker.io


root@devOps:~# docker --version
Docker version 1.6.2, build 7c8fca2
root@devOps:~# docker version
Client version: 1.6.2
Client API version: 1.18
Go version (client): go1.5.1
Git commit (client): 7c8fca2
OS/Arch (client): linux/amd64
Server version: 1.6.2
Server API version: 1.18
Go version (server): go1.5.1
Git commit (server): 7c8fca2
OS/Arch (server): linux/amd64
root@devOps:~# docker info
Containers: 0
Images: 0
Storage Driver: aufs
 Root Dir: /var/lib/docker/aufs
 Backing Filesystem: extfs
 Dirs: 0
 Dirperm1 Supported: true
Execution Driver: native-0.2
Kernel Version: 4.2.0-16-generic
Operating System: Ubuntu 15.10
CPUs: 1
Total Memory: 992.9 MiB
Name: devOps
ID: R5EL:O4RT:4BSI:EODC:T2H6:QYFL:HKNN:WNEZ:3S2J:J6K2:S6NB:JERI
WARNING: No swap limit support
root@devOps:~#

root@devOps:~# ll /var/run/

srw-rw----  1 root  docker    0 Mar 30 15:52 docker.sock=


root@devOps:~# cat /etc/group
docker:x:129:

root@devOps:~# gpasswd -a "nilesh" docker
Adding user nilesh to group docker
root@devOps:~#

root@devOps:~# cat /etc/group
docker:x:129:nilesh

## Upgarde Docker on Ubuntu


root@devOps:~# wget -qO- https://get.docker.io/gpg | sudo apt-key add -
OK
root@devOps:~# echo deb http://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list
root@devOps:~# apt-get update

root@ubuntu:~# apt-get install -y lxc-docker

root@devOps:~# docker -v
Docker version 1.9.1, build a34a1d5
root@devOps:~#


## Docker install on Centos7

uname -r
3.10.0-229.el7.x86_64

yum update

yum install -y docker

# Got below Error :
Transaction check error:
  file /usr/lib/systemd/system/blk-availability.service from install of device-mapper-7:1.02.107-5.el7_2.1.x86_64 conflicts with file from package lvm2-7:2.02.105-14.el7.x86_64
  file /usr/sbin/blkdeactivate from install of device-mapper-7:1.02.107-5.el7_2.1.x86_64 conflicts with file from package lvm2-7:2.02.105-14.el7.x86_64
  file /usr/share/man/man8/blkdeactivate.8.gz from install of device-mapper-7:1.02.107-5.el7_2.1.x86_64 conflicts with file from package lvm2-7:2.02.105-14.el7.x86_64

# Resolve :

https://bugzilla.redhat.com/show_bug.cgi?id=1294128

After 'yum upgrade lvm2'

[root@localhost ~]# yum upgrade lvm2

[root@localhost ~]# yum -install -y docker

[root@localhost ~]# service docker start
Redirecting to /bin/systemctl start  docker.service
[root@localhost ~]# service docker status
Redirecting to /bin/systemctl status  docker.service
docker.service - Docker Application Container Engine
   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled)
   Active: active (running) 

 
 [root@localhost ~]# docker -v
Docker version 1.8.2-el7.centos, build a01dc02/1.8.2
[root@localhost ~]# docker version
Client:
 Version:      1.8.2-el7.centos
 API version:  1.20
 Package Version: docker-1.8.2-10.el7.centos.x86_64
 Go version:   go1.4.2
 Git commit:   a01dc02/1.8.2
 Built:
 OS/Arch:      linux/amd64

Server:
 Version:      1.8.2-el7.centos
 API version:  1.20
 Package Version:
 Go version:   go1.4.2
 Git commit:   a01dc02/1.8.2
 Built:
 OS/Arch:      linux/amd64
[root@localhost ~]# docker info
Containers: 0
Images: 0
Storage Driver: devicemapper
 Pool Name: docker-253:1-918086-pool
 Pool Blocksize: 65.54 kB
 Backing Filesystem: extfs
 Data file: /dev/loop0
 Metadata file: /dev/loop1
 Data Space Used: 307.2 MB
 Data Space Total: 107.4 GB
 Data Space Available: 23.85 GB
 Metadata Space Used: 733.2 kB
 Metadata Space Total: 2.147 GB
 Metadata Space Available: 2.147 GB
 Udev Sync Supported: true
 Deferred Removal Enabled: false
 Data loop file: /var/lib/docker/devicemapper/devicemapper/data
 Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata
 Library Version: 1.02.107-RHEL7 (2015-12-01)
Execution Driver: native-0.2
Logging Driver: json-file
Kernel Version: 3.10.0-123.20.1.el7.x86_64
Operating System: CentOS Linux 7 (Core)
CPUs: 3
Total Memory: 994.2 MiB
Name: localhost.localdomain
ID: UXFX:IZZQ:PJ3L:L3ST:RUD3:6C2Y:LK3R:JEJO:A6N7:UDIY:WGGK:DRJ2
WARNING: bridge-nf-call-iptables is disabled
WARNING: bridge-nf-call-ip6tables is disabled
[root@localhost ~]#


## DOCKER socket conntion over internet ::

# Working on Ubuntu :: Here Ubuntu is as a Daemon

root@devOps:~# netstat -tpl

root@devOps:~# service docker stop
root@devOps:~# service docker status

root@devOps:~# docker -H 172.27.59.67:2375 -d &
[1] 5315
root@devOps:~# Warning: '-d' is deprecated, it will be removed soon. See usage.
WARN[0000] please use 'd

root@devOps:~# netstat -tpl

tcp        0      0 devops.cybage.com:2375  *:*                     LISTEN      5315/docker

root@devOps:~# docker info
Cannot connect to the Docker daemon. Is the docker daemon running on this host?
root@devOps:~# 

# Working on Centos7 :: Here Centos7 is as a Client :

[root@localhost ~]# export DOCKER_HOST="tcp://172.27.59.67:2375"

[root@localhost ~]# docker version
Client:
 Version:      1.8.2-el7.centos
 API version:  1.20
 Package Version: docker-1.8.2-10.el7.centos.x86_64
 Go version:   go1.4.2
 Git commit:   a01dc02/1.8.2
 Built:
 OS/Arch:      linux/amd64

Server:
 Version:      1.9.1
 API version:  1.21
 Package Version:
 Go version:   go1.4.3
 Git commit:   a34a1d5
 Built:        Fri Nov 20 17:56:04 UTC 2015
 OS/Arch:      linux/amd64
[root@localhost ~]# 

# Centos7 machine treat as client Version:      1.8.2-el7.centos

# Back to local client - server Deamon on Centos7

[root@localhost ~]# export DOCKER_HOST=
[root@localhost ~]# docker version
Client:
 Version:      1.8.2-el7.centos
 API version:  1.20
 Package Version: docker-1.8.2-10.el7.centos.x86_64
 Go version:   go1.4.2
 Git commit:   a01dc02/1.8.2
 Built:
 OS/Arch:      linux/amd64

Server:
 Version:      1.8.2-el7.centos
 API version:  1.20
 Package Version:
 Go version:   go1.4.2
 Git commit:   a01dc02/1.8.2
 Built:
 OS/Arch:      linux/amd64
[root@localhost ~]#

## On Ubuntu : docker.service is masked we cannot start service we have to unmask it:
root@devOps:~# docker info
Cannot connect to the Docker daemon. Is the docker daemon running on this host?

root@devOps:~# service docker start
Failed to start docker.service: Unit docker.service is masked.
root@devOps:~# 

root@devOps:~# systemctl unmask docker.service
Removed symlink /etc/systemd/system/docker.service.
root@devOps:~# systemctl unmask docker.socket
Removed symlink /etc/systemd/system/docker.socket.
root@devOps:~# systemctl start docker.service
root@devOps:~#

## Runing Centos Container on ubuntu Host

root@devOps:~# docker run -it centos /bin/bash
Unable to find image 'centos:latest' locally
latest: Pulling from library/centos

fa5be2806d4c: Pull complete
ec6bd55c6a0a: Pull complete
721496b876b6: Pull complete
eb98cdc284d4: Pull complete
Digest: sha256:381f21e4c7b3724c6f420b2bcfa6e13e47ed155192869a2a04fa10f944c78476
Status: Downloaded newer image for centos:latest
[root@026f395231ad /]#

# It pull latest Image if we didn't mention in docker run command

[root@026f395231ad /]# cat /etc/redhat-release
CentOS Linux release 7.2.1511 (Core)
[root@026f395231ad /]#

## We can create file on container and we can view that file on host docker machine ::

# Created file on CentOS Container
[root@42e73490f5ce /]# vi /tmp/testfile.txt
[root@42e73490f5ce /]# cat /tmp/testfile.txt
SHIV
[root@42e73490f5ce /]#

# We can view that file on Docker host machine Ubuntu
root@devOps:/var/lib/docker/aufs/diff/42e73490f5ce5820a7de0bc9c872ba4ac18e70a02050ef7ff438697da735e171# ll
total 24
drwxr-xr-x  6 root root 4096 Mar 31 10:54 ./
drwxr-xr-x 12 root root 4096 Mar 31 10:51 ../
dr-xr-x---  2 root root 4096 Mar 31 10:54 root/
drwxrwxrwt  2 root root 4096 Mar 31 10:52 tmp/
-r--r--r--  1 root root    0 Mar 31 10:51 .wh..wh.aufs
drwx------  2 root root 4096 Mar 31 10:51 .wh..wh.orph/
drwx------  2 root root 4096 Mar 31 10:51 .wh..wh.plnk/
root@devOps:/var/lib/docker/aufs/diff/42e73490f5ce5820a7de0bc9c872ba4ac18e70a02050ef7ff438697da735e171# cat tmp/testfile.txt
SHIV
root@devOps:/var/lib/docker/aufs/diff/42e73490f5ce5820a7de0bc9c872ba4ac18e70a02050ef7ff438697da735e171#

## Docker creates images with multiple layered images


root@devOps:~# docker pull coreos/apache
Using default tag: latest
latest: Pulling from coreos/apache

d634beec75db: Pull complete
8b877d3adb63: Pull complete
95dde7ac21e8: Pull complete
7aaa39173c60: Pull complete
Digest: sha256:9af520cee7bedcda564970ff790cdf2e72b6daccce8539f6b3c880ed7fc21091
Status: Downloaded newer image for coreos/apache:latest
root@devOps:~#


root@devOps:~# cd /var/lib/docker/aufs/layers/
root@devOps:/var/lib/docker/aufs/layers# cat d634beec75db64004deb5878e6234311d42edc0a4a19199b300ae4c4c9e2e989
root@devOps:/var/lib/docker/aufs/layers# cat 7aaa39173c60e6020401b7aa2bc4e48faada6b1b34d6c713f15ce4a97b23ae8b
root@devOps:/var/lib/docker/aufs/layers# cat 7aaa39173c60e6020401b7aa2bc4e48faada6b1b34d6c713f15ce4a97b23ae8b
95dde7ac21e851a66266522631416f9b7d4121eff8ae3c840bf9e7067474ac09
8b877d3adb634e097841c1b6df6571a8bb5a5ff90d6ad8b8cc5518c291c1d957
d634beec75db64004deb5878e6234311d42edc0a4a19199b300ae4c4c9e2e989
root@devOps:/var/lib/docker/aufs/layers# cat 95dde7ac21e851a66266522631416f9b7d4121eff8ae3c840bf9e7067474ac09
8b877d3adb634e097841c1b6df6571a8bb5a5ff90d6ad8b8cc5518c291c1d957
d634beec75db64004deb5878e6234311d42edc0a4a19199b300ae4c4c9e2e989
root@devOps:/var/lib/docker/aufs/layers# cat 8b877d3adb634e097841c1b6df6571a8bb5a5ff90d6ad8b8cc5518c291c1d957
d634beec75db64004deb5878e6234311d42edc0a4a19199b300ae4c4c9e2e989
root@devOps:/var/lib/docker/aufs/layers# cat d634beec75db64004deb5878e6234311d42edc0a4a19199b300ae4c4c9e2e989
root@devOps:/var/lib/docker/aufs/layers#

root@devOps:~# docker run centos /bin/bash -c "echo 'BINGO' > /tmp/SUCCESS.txt"
root@devOps:~# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES
f3f8f2921706        centos              "/bin/bash -c 'echo '"   9 seconds ago       Exited (0) 8 seconds ago                       naughty_boyd
42e73490f5ce        centos              "/bin/bash"              4 hours ago         Exited (127) 4 hours ago                       backstabbing_albattani
026f395231ad        centos              "/bin/bash"              21 hours ago        Exited (1) 20 hours ago                        goofy_dubinsky
root@devOps:~#

## Moving Docker Conainer from one host to another HOST

root@devOps:~# docker run centos /bin/bash -c "echo 'BINGO' > /tmp/SUCCESS.txt"
root@devOps:~# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES
f3f8f2921706        centos              "/bin/bash -c 'echo '"   9 seconds ago       Exited (0) 8 seconds ago                       naughty_boyd
42e73490f5ce        centos              "/bin/bash"              4 hours ago         Exited (127) 4 hours ago                       backstabbing_albattani
026f395231ad        centos              "/bin/bash"              21 hours ago        Exited (1) 20 hours ago                        goofy_dubinsky
root@devOps:~#

root@devOps:~# docker commit f3f8f2921706 my1image
e28c182d4225ff0aa77f610f450f3ca0e32fe152ccd6c63ee3ec8eb8dacd91ee
root@devOps:~#


root@devOps:~# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE
my1image            latest              e28c182d4225        About a minute ago   196.6 MB
centos              latest              eb98cdc284d4        3 weeks ago          196.6 MB
<none>              <none>              6fdebd7b0eb5        3 weeks ago          196.6 MB
amolsh/mysql_test   latest              527298ac7056        9 months ago         339 MB
coreos/apache       latest              7aaa39173c60        2 years ago          294.4 MB
root@devOps:~#


root@devOps:~# docker history my1image
IMAGE               CREATED              CREATED BY                                      SIZE                COMMENT
e28c182d4225        About a minute ago   /bin/bash -c echo 'BINGO' > /tmp/SUCCESS.txt    6 B
eb98cdc284d4        3 weeks ago          /bin/sh -c #(nop) CMD ["/bin/bash"]             0 B
721496b876b6        3 weeks ago          /bin/sh -c #(nop) LABEL name=CentOS Base Imag   0 B
ec6bd55c6a0a        3 weeks ago          /bin/sh -c #(nop) ADD file:72852fc7626d233343   196.6 MB
fa5be2806d4c        6 months ago         /bin/sh -c #(nop) MAINTAINER The CentOS Proje   0 B
root@devOps:~#

root@devOps:~# docker save -o /tmp/my1image.tar my1image
root@devOps:~# ls -a /tmp/my1image.tar
/tmp/my1image.tar
root@devOps:~#

[nilesh@localhost ~]$ tar -tf my1image.tar
721496b876b6bfa189cfa194de6a2000deff263d55ef0aa30ed01dc0db4d9a5b/
721496b876b6bfa189cfa194de6a2000deff263d55ef0aa30ed01dc0db4d9a5b/VERSION
721496b876b6bfa189cfa194de6a2000deff263d55ef0aa30ed01dc0db4d9a5b/json
721496b876b6bfa189cfa194de6a2000deff263d55ef0aa30ed01dc0db4d9a5b/layer.tar
e28c182d4225ff0aa77f610f450f3ca0e32fe152ccd6c63ee3ec8eb8dacd91ee/
e28c182d4225ff0aa77f610f450f3ca0e32fe152ccd6c63ee3ec8eb8dacd91ee/VERSION
e28c182d4225ff0aa77f610f450f3ca0e32fe152ccd6c63ee3ec8eb8dacd91ee/json
e28c182d4225ff0aa77f610f450f3ca0e32fe152ccd6c63ee3ec8eb8dacd91ee/layer.tar
eb98cdc284d483507e88577eaf492a179809bd5a0a1b0651a394844138edb5ab/
eb98cdc284d483507e88577eaf492a179809bd5a0a1b0651a394844138edb5ab/VERSION
eb98cdc284d483507e88577eaf492a179809bd5a0a1b0651a394844138edb5ab/json
eb98cdc284d483507e88577eaf492a179809bd5a0a1b0651a394844138edb5ab/layer.tar
ec6bd55c6a0aaeb2226e7b69826ad6f0442b64709f7bed92ec1e235e5ec0674a/
ec6bd55c6a0aaeb2226e7b69826ad6f0442b64709f7bed92ec1e235e5ec0674a/VERSION
ec6bd55c6a0aaeb2226e7b69826ad6f0442b64709f7bed92ec1e235e5ec0674a/json
ec6bd55c6a0aaeb2226e7b69826ad6f0442b64709f7bed92ec1e235e5ec0674a/layer.tar
fa5be2806d4c9aa0f75001687087876e47bb45dc8afb61f0c0e46315500ee144/
fa5be2806d4c9aa0f75001687087876e47bb45dc8afb61f0c0e46315500ee144/VERSION
fa5be2806d4c9aa0f75001687087876e47bb45dc8afb61f0c0e46315500ee144/json
fa5be2806d4c9aa0f75001687087876e47bb45dc8afb61f0c0e46315500ee144/layer.tar
repositories
[nilesh@localhost ~]$


[nilesh@localhost ~]$ docker load -i my1image.tar
[nilesh@localhost ~]$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED                  VIRTUAL SIZE
my1image            latest              e28c182d4225        Less than a second ago   196.6 MB
[nilesh@localhost ~]$

[nilesh@localhost ~]$ docker run -it my1image /bin/bash
[root@745e5005b807 /]# cat /tmp/SUCCESS.txt
BINGO
[root@745e5005b807 /]#

## Running container and Detatech from termianl and execute in backgroud

root@devOps:~# docker run -d centos /bin/bash -c "ping 8.8.8.8 -c 50"
18c6f29e9dcebd6bf7e13469cc53244c08d74f16919c8a4c036c6d05df8ad328
root@devOps:~# docker ps
CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS              PORTS                  NAMES
18c6f29e9dce        centos                      "/bin/bash -c 'ping 8"   7 seconds ago       Up 7 seconds                               furious_spence

root@devOps:~# docker top 18c6f29e9dce
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                8513                6298                0                   16:49               ?                   00:00:00            ping 8.8.8.8 -c 50
root@devOps:~#

## To get detailed info about Container

docker inspect 18c6f29e9dce
[
{
    "Id": "18c6f29e9dcebd6bf7e13469cc53244c08d74f16919c8a4c036c6d05df8ad328",
    "Created": "2016-03-31T11:19:52.443369425Z",
    "Path": "/bin/bash",
    "Args": [

	
## How to run container in backgroud with key [Ctrl + P + Q]
	
root@devOps:~# docker run -it centos /bin/bash
[root@f198061ad92b /]# 
key [Ctrl + P + Q]
root@devOps:~#
root@devOps:~#
root@devOps:~#
root@devOps:~# docker ps
CONTAINER ID        IMAGE                       COMMAND             CREATED              STATUS              PORTS                  NAMES
f198061ad92b        centos                      "/bin/bash"         About a minute ago   Up About a minute                          jolly_bartik
f2118070cd05        amolsh/php-app-db-url-env   "/run.sh"           11 minutes ago       Up 11 minutes       0.0.0.0:8080->80/tcp   php_app_url3
root@devOps:~#

root@devOps:~# docker stop f198061ad92b
f198061ad92b
root@devOps:~# docker ps
CONTAINER ID        IMAGE                       COMMAND             CREATED             STATUS              PORTS                  NAMES

## DOCKER Container we can start container which last process was running

root@devOps:~# docker ps -l
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                       PORTS               NAMES
f198061ad92b        centos              "/bin/bash"         8 minutes ago       Exited (137) 4 minutes ago                       jolly_bartik
root@devOps:~# docker start f198061ad92b
f198061ad92b
root@devOps:~# docker attach f198061ad92b

[root@f198061ad92b /]#
[root@f198061ad92b /]#
[root@f198061ad92b /]# root@devOps:~#
root@devOps:~#
root@devOps:~# docker ps
CONTAINER ID        IMAGE                       COMMAND             CREATED             STATUS              PORTS                  NAMES
f198061ad92b        centos                      "/bin/bash"         10 minutes ago      Up About a minute                          jolly_bartik

** For full blown container we can take images from 'phusion/baseimage'

## Running top command on DOCKER host, so that we can check the process runnin in container.


root@ubuntu:~/Nils/GIT/Repo/shiv# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
d16cc1a3236c        my1image            "/bin/bash"         4 hours ago         Up 9 seconds                            cocky_noyce
root@ubuntu:~/Nils/GIT/Repo/shiv# docker top d16cc1a3236c
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                1430                674                 0                   17:48               pts/3               00:00:00            /bin/bash
root@ubuntu:~/Nils/GIT/Repo/shiv# docker attach d16cc1a3236c

[root@d16cc1a3236c /]# ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 12:18 ?        00:00:00 /bin/bash
root        18     1  0 12:19 ?        00:00:00 ps -ef
[root@d16cc1a3236c /]#

## How to connect to conatiner like 'docker attach', with help of 'docker exec' command, we can come out of container without stopping 
container [like-crtl+P+Q]

root@ubuntu:~# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
d16cc1a3236c        my1image            "/bin/bash"         5 hours ago         Up 12 minutes                           cocky_noyce
root@ubuntu:~# docker inspect d16cc1a3236c | grep pid
root@ubuntu:~# docker inspect d16cc1a3236c | grep -i pid
        "Pid": 1430,
        "PidMode": "",
root@ubuntu:~# docker top d16cc1a3236c
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                1430                674                 0                   17:48               pts/3               00:00:00            /bin/bash
root@ubuntu:~# 

root@ubuntu:~# docker exec -it d16cc1a3236c /bin/bash
[root@d16cc1a3236c /]#
[root@d16cc1a3236c /]#
[root@d16cc1a3236c /]# ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 12:18 ?        00:00:00 /bin/bash
root        20     0  0 12:37 ?        00:00:00 /bin/bash
root        34    20  0 12:37 ?        00:00:00 ps -ef
[root@d16cc1a3236c /]# exit
root@ubuntu:~# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
d16cc1a3236c        my1image            "/bin/bash"         5 hours ago         Up 19 minutes                           cocky_noyce
root@ubuntu:~#

**Frist Presentation on DOCKER youtube :: https://www.youtube.com/watch?v=wW9CAH9nSLs

## Building Images from DOCKER file


root@ubuntu:~/Nils/DOCKER# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
my1image            latest              e28c182d4225        26 hours ago        196.6 MB
root@ubuntu:~/Nils/DOCKER# 

root@ubuntu:~/Nils/DOCKER# cat Dockerfile
#Building CentOS 7.0 docker image
FROM my1image
MAINTAINER nileshsu@cybage.com
RUN yum update
CMD ["echo","HELLO WORLD"]

root@ubuntu:~/Nils/DOCKER# docker build -t helloworld.0.1 .
Sending build context to Docker daemon 3.072 kB
Step 1 : FROM my1image
 ---> e28c182d4225
Step 2 : MAINTAINER nileshsu@cybage.com
 ---> Using cache
 ---> 6369829a6b13
Step 3 : CMD echo HELLO WORLD
 ---> Running in 97e1d87e73b4
 ---> ccbac51b7a8a
Removing intermediate container 97e1d87e73b4
Successfully built ccbac51b7a8a

root@ubuntu:~/Nils/DOCKER# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
helloworld.0.1      latest              ccbac51b7a8a        8 seconds ago       196.6 MB
my1image            latest              e28c182d4225        26 hours ago        196.6 MB
root@ubuntu:~/Nils/DOCKER#

root@ubuntu:~/Nils/DOCKER# docker history helloworld.0.1
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
ccbac51b7a8a        2 minutes ago       /bin/sh -c #(nop) CMD ["echo" "HELLO WORLD"]    0 B         
6369829a6b13        6 minutes ago       /bin/sh -c #(nop) MAINTAINER nileshsu@cybage.   0 B         
e28c182d4225        27 hours ago        /bin/bash -c echo 'BINGO' > /tmp/SUCCESS.txt    6 B         
eb98cdc284d4        3 weeks ago         /bin/sh -c #(nop) CMD ["/bin/bash"]             0 B         
721496b876b6        3 weeks ago         /bin/sh -c #(nop) LABEL name=CentOS Base Imag   0 B         
ec6bd55c6a0a        3 weeks ago         /bin/sh -c #(nop) ADD file:72852fc7626d233343   196.6 MB    
fa5be2806d4c        6 months ago        /bin/sh -c #(nop) MAINTAINER The CentOS Proje   0 B         
root@ubuntu:~/Nils/DOCKER#

root@ubuntu:~/Nils/DOCKER# docker run helloworld.0.1
HELLO WORLD
root@ubuntu:~/Nils/DOCKER#


## Push Image on docker Hub

root@ubuntu:~/Nils/DOCKER# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
helloworld.0.1      latest              ccbac51b7a8a        17 minutes ago      196.6 MB
my1image            latest              e28c182d4225        27 hours ago        196.6 MB
root@ubuntu:

root@ubuntu:~/Nils/DOCKER# docker tag e28c182d4225 nilesh7756/my1image:1.0
root@ubuntu:~/Nils/DOCKER# docker images
REPOSITORY            TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
helloworld.0.1        latest              ccbac51b7a8a        21 minutes ago      196.6 MB
my1image              latest              e28c182d4225        27 hours ago        196.6 MB
nilesh7756/my1image   1.0                 e28c182d4225        27 hours ago        196.6 MB
root@ubuntu:~/Nils/DOCKER#

** Before you run the push/pull try doing a 'docker login' in the terminal, then run the command.

root@ubuntu:~/Nils/DOCKER# docker login
Username: nilesh7756
Password:
Email: nnilesh7756@gmail.com
WARNING: login credentials saved in /root/.docker/config.json
Login Succeeded
root@ubuntu:~/Nils/DOCKER#

root@ubuntu:~/Nils/DOCKER# docker push nilesh7756/my1image:1.0
The push refers to a repository [docker.io/nilesh7756/my1image] (len: 1)
e28c182d4225: Pushed
eb98cdc284d4: Pushed
721496b876b6: Pushed
ec6bd55c6a0a: Pushed
fa5be2806d4c: Pushed
1.0: digest: sha256:64ac3d74c8f5c3eaf7963f8cb4b193f9a6a9b05bcb717b0b1c10b324d070dd98 size: 8441
root@ubuntu:~/Nils/DOCKER#

## Pulling image from docker HUB 

[root@nilsworkst ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
[root@nilsworkst ~]# docker pull nilesh7756/my1image:1.0
Trying to pull repository docker.io/nilesh7756/my1image ... 1.0: Pulling from nilesh7756/my1image

fa5be2806d4c: Pull complete
ec6bd55c6a0a: Pull complete
721496b876b6: Pull complete
eb98cdc284d4: Pull complete
e28c182d4225: Pull complete
Digest: sha256:64ac3d74c8f5c3eaf7963f8cb4b193f9a6a9b05bcb717b0b1c10b324d070dd98
Status: Downloaded newer image for docker.io/nilesh7756/my1image:1.0

[root@nilsworkst ~]# docker images
REPOSITORY                      TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
docker.io/nilesh7756/my1image   1.0                 e28c182d4225        27 hours ago        196.6 MB
[root@nilsworkst ~]#


## How to delete Container and IMAGE

** First we have to delete Container and we have to delete image

root@ubuntu:~/Nils/DOCKER# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES
c1ed3ea44a69        helloworld.0.1      "/bin/bash"              29 minutes ago      Exited (0) 29 minutes ago                         loving_jepsen
5e45cf5da2a9        helloworld.0.1      "echo 'HELLO WORLD'"     30 minutes ago      Exited (0) 30 minutes ago                         cocky_lumiere
3f28e99824ce        6369829a6b13        "/bin/sh -c 'yum upda"   34 minutes ago      Exited (1) 34 minutes ago                         grave_shaw
dfb5ca3a77e3        6369829a6b13        "/bin/sh -c 'apt-get "   37 minutes ago      Exited (127) 37 minutes ago                       cranky_mietner
d16cc1a3236c        my1image            "/bin/bash"              6 hours ago         Exited (137) 15 seconds ago                       cocky_noyce
root@ubuntu:~/Nils/DOCKER# docker rm d16cc1a3236c
d16cc1a3236c
root@ubuntu:~/Nils/DOCKER# docker images
REPOSITORY            TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
helloworld.0.1        latest              ccbac51b7a8a        34 minutes ago      196.6 MB
my1image              latest              e28c182d4225        27 hours ago        196.6 MB
root@ubuntu:~/Nils/DOCKER# docker rmi e28c182d4225
e28c182d4225
root@ubuntu:~/Nils/DOCKER#


##4/4/2016

## Create a Optimise Docker file :

root@ubuntu:~/Nils/webserver# cat Dockerfile
#Simple Webserver Docker Container
FROM ubuntu
RUN apt-get update && apt-get install -y \
        apache2 \
        apache2-utils \
        vim \
        && apt-get clean
EXPOSE 80
CMD ["apache2ctl", "-D", "FOREGROUND"]
root@ubuntu:~/Nils/webserver#

##Building above Dockerfile with docker build command

root@ubuntu:~/Nils/webserver# docker build -t="webserver" .
Sending build context to Docker daemon 3.072 kB
Step 1 : FROM ubuntu
 ---> 1a094f2972de
Step 2


root@ubuntu:~/Nils/webserver# docker images
REPOSITORY            TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
webserver             latest              91c7302bb837        3 minutes ago       266.5 MB

##Port Mapping of container from 80 to 8080

root@ubuntu:~/Nils/webserver# docker run -d -p 8080:80 webserver fe407958ac83db6a079c3e40812205158f4c86fffa0fef0f28f7f2f17a93b37d
root@ubuntu:~/Nils/webserver#

root@ubuntu:~/Nils/webserver# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
fe407958ac83        webserver           "apache2ctl -D FOREGR"   2 minutes ago       Up 2 minutes        0.0.0.0:8080->80/tcp   sharp_ardinghelli
root@ubuntu:~/Nils/webserver#

# Checked on Browser : Windows Machine

http://172.27.59.208:8080/

root@ubuntu:~# docker port fe407958ac83
80/tcp -> 0.0.0.0:8080
root@ubuntu:~#



##Give Entrypoint in Docker file

root@ubuntu:~/Nils/webserver# cat Dockerfile
#Simple Webserver Docker Container
FROM ubuntu
RUN apt-get update && apt-get install -y \
        apache2 \
        apache2-utils \
        vim \
        && apt-get clean
EXPOSE 80
#CMD ["apache2ctl", "-D", "FOREGROUND"]
ENTRYPOINT ["echo"]
root@ubuntu:~/Nils/webserver#


root@ubuntu:~/Nils/webserver# docker build -t="ep1" .
Sending build context to Docker daemon 3.072 kB
Step 1 : 

root@ubuntu:~/Nils/webserver# docker images
REPOSITORY            TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ep1                   latest              aab3e67de4d3        6 seconds ago       266.5 MB

root@ubuntu:~/Nils/webserver# docker run -it ep1 /bin/bash
/bin/bash
root@ubuntu:

# In above /bin/bash was took as argument as we have mention ENTRYPOINT in Dockerfile while creating BUILD.

## Define ENV varibake in Dockerfile 

root@ubuntu:~/Nils/webserver# cat Dockerfile
#Simple Webserver Docker Container
FROM ubuntu
RUN apt-get update && apt-get install -y \
        apache2 \
        apache2-utils \
        vim \
        && apt-get clean
EXPOSE 80
ENV var1=Nilesh var2=Suryavanshi
#CMD ["apache2ctl", "-D", "FOREGROUND"]
#ENTRYPOINT ["echo"]
root@ubuntu:~/Nils/webserver# docker build -t="env1" .
Sending build context to Docker daemon 3.072 kB
Step 1 :

root@ubuntu:~/Nils/webserver# docker run -it env1 /bin/bash
root@22876ac6e70e:/#

root@22876ac6e70e:/# env
var1=Nilesh
var2=Suryavanshi
HOSTNAME=22876ac6e70e
TERM=xterm
LS_COLORS

##Using varible while in Dockerfile and check LOGS from Docker HOST

root@ubuntu:~/Nils/webserver# cat Dockerfile
#Simple Webserver Docker Container
FROM ubuntu
RUN apt-get update && apt-get install -y iputils-ping

ENV var1=ping var2=8.8.8.8

CMD $var1 $var2
#CMD ["apache2ctl", "-D", "FOREGROUND"]
#ENTRYPOINT ["echo"]
root@ubuntu:~/Nils/webserver#

BUILD the Image

root@ubuntu:~/Nils/webserver# docker run -d pinger
87af53d2ecd2d85ad26e1927e32671321bdf5501150c9b0a5fde1dac5b1f9638
root@ubuntu:~/Nils/webserver# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
87af53d2ecd2        pinger              "/bin/sh -c '$var1 $v"   5 seconds ago       Up 4 seconds                               angry_easley


# Checking logs from docker host

root@ubuntu:~/Nils/webserver# docker logs 87af53d2ecd2
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=52 time=10.5 ms
64 bytes from 8.8

# Checking logs from docker host interactive

root@ubuntu:~/Nils/webserver# docker logs -f 87af53d2ecd2
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=52 time=10.5 ms
64 bytes 


## Creating Volumes 

#Creating a Container and Volume inside it 

root@ubuntu:~/Nils/webserver# docker run -it -v /test-vol --name=nilsdb ubuntu /bin/bash
root@1731062d8a9c:/# ll /test-vol/
total 8
drwxr-xr-x  2 root root 4096 Apr  4 12:27 ./
drwxr-xr-x 33 root root 4096 Apr  4 12:27 ../
root@1731062d8a9c:/#

root@1731062d8a9c:/test-vol# pwd
/test-vol
root@1731062d8a9c:/test-vol# cat testfile
SHIV
root@1731062d8a9c:/test-vol#


root@ubuntu:~/Nils/webserver# docker inspect 1731062d8a9c


"Mounts": [
        {
            "Name": "f3c2532fc436694335e472c6a1de644a8b6b48ddabeda07748284d710f86b436",
            "Source": "/var/lib/docker/volumes/f3c2532fc436694335e472c6a1de644a8b6b48ddabeda07748284d710f86b436/_data",
            "Destination": "/test-vol",
            "Driver": "local",
            "Mode": "",
            "RW": true
        }

		
root@ubuntu:~/Nils/webserver# cat /var/lib/docker/volumes/f3c2532fc436694335e472c6a1de644a8b6b48ddabeda07748284d710f86b436/_data/testfile
SHIV
root@ubuntu:~/Nils/webserver#

#We can share this Volume with another container

root@ubuntu:~/Nils/webserver# docker run -it --volumes-from=nilsdb ubuntu /bin/bash
root@74ef1d108acc:/# ll /test-vol/
total 12
drwxr-xr-x  2 root root 4096 Apr  4 12:31 ./
drwxr-xr-x 33 root root 4096 Apr  4 12:38 ../
-rw-r--r--  1 root root    5 Apr  4 12:31 testfile

root@74ef1d108acc:/# cat /test-vol/testfile
SHIV
root@74ef1d108acc:/#

##We can share Volume of host machine in container

docker run -v /data:/data

## DOCKER Networking

root@ubuntu:~/Nils/webserver# ifconfig
docker0   Link encap:Ethernet  HWaddr 02:42:fa:49:9e:a9
          inet addr:172.17.0.1  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:faff:fe49:9ea9/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:12409 errors:0 dropped:0 overruns:0 frame:0
          TX packets:14596 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:745077 (745.0 KB)  TX bytes:75949120 (75.9 MB)
		  

root@ubuntu:~# apt-get install bridge-utils
Reading package lists... Done
Building dependency tree
Reading

root@ubuntu:~# brctl show docker
bridge name     bridge id               STP enabled     interfaces
docker          can't get info No such device
root@ubuntu:~#

## We can chane PROTOCOL from TCP to UDP

root@ubuntu:~# docker run -d -p 5001:80/udp webserver
2cbc06dfdb80757d0d54dd108e4d6d337911e9b920793d50de1e9c494305be6d
root@ubuntu:~# 		  

root@ubuntu:~# docker port 2cbc06dfdb80
80/udp -> 0.0.0.0:5001
root@ubuntu:~#


## We can STOP container in one shoot

root@ubuntu:~# docker stop 2cbc06dfdb80 1731062d8a9c 87af53d2ecd2 fe407958ac83
2cbc06dfdb80
1731062d8a9c
87af53d2ecd2
fe407958ac83
root@ubuntu:~#


##Linking of Containers

root@ubuntu:~# docker run --name=source -d webserver
66b5078dff52d2446cf060f7fdeabe5a5ded7d4cfac01a147d35073dd19db648
root@ubuntu:~#

#Link source container with new reciver container

root@ubuntu:~# docker run --name=reciver --link=source:alis_source -it my1image /bin/bash
[root@fd88a2900b23 /]#

#Checking as inspect

root@ubuntu:~# docker inspect reciver | grep Link -1
        "PortBindings": {},
        "Links": [
            "/source:/reciver/alis_source"


#There will be no link from source
			
root@ubuntu:~# docker inspect source  | grep Link -1
        "PortBindings": {},
        "Links": null,

#Source provides the bunch of Variables to Reciver

[root@fd88a2900b23 /]# env
HOSTNAME=fd88a2900b23
.
.
ALIS_SOURCE_PORT_80_TCP_PORT=80
ALIS_SOURCE_PORT_80_TCP_ADDR=172.17.0.2
_=/usr/bin/env
[root@fd88a2900b23 /]#
		